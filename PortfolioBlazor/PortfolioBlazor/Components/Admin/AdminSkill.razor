@page "/admin/skills"
@inject HttpClient http
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.Authorization
@using PortfolioBlazor.Components.Layout
@using PortfolioBlazor.Models
@using PortfolioBlazor.Components.Public.Controls
@rendermode InteractiveServer
@layout AdminLayout
@inject IJSRuntime jsruntime

    <div id="cloud-js"></div>

<div class="container-fluid p-5">
    <div class="text-center">
        <h3>Admin Dashboard</h3>
        <p>Welcome to the Admin Panel!</p>
    </div>
    <div class="row row-cols-sm-1 row-cols-md-2 row-cols-lg-4 row-cols-xl-8 g-2 d-flex justify-content-start mx-auto" style="max-width:1000px;">

         @foreach(var skill in skills)
         {
            <div class="col pb-2">
               <SkillCard Skill="skill" 
                   OnDelete="() => DeleteSkill(skill.Id)"
                   IsAuthorized="true"
                   OnSkillUpdate="()=> UpdateSkill(skill)"/>
            </div>
         }
    </div>
</div>
<div class="d-flex justify-content-center">

    <button class="btn btn-success border-bg-success" @onclick="AddSkillAsync" style="z-index:55;">Add skill</button>
    <button class="btn btn-Primary border-bg-Alert" @onclick="AddProjectAsync" style="z-index:55;">Add Project</button>
</div>


@code {
    private List<TechsModel>? skills = new();
    private TechsModel? selectedSkill;
    private List<TechsModel>? Projects = new();
    private string? editingSkillId = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadSkills();
    }

    private async Task LoadSkills()
    {
        skills = await http.GetFromJsonAsync<List<TechsModel>>("https://localhost:7192/api/techs");
    }

    private async Task UpdateSkill(TechsModel skill)
    {
        var response = await http.PutAsJsonAsync($"https://localhost:7192/api/tech{skill.Id}", skill);
        if (response.IsSuccessStatusCode)
        {
            await LoadSkills();
            CancelEditing();  // Close the edit form
        }
    }
    private async Task AddSkillAsync()
    {
        var newSkill = new TechsModel
            {

                Technologies = "New Technology", // Default name
                TechExperience = "0 years", // Default experience
                SkillLevel = 1, // Default skill level
                image = "favicon.png" // Default image
            };

        // Add the new skill to the list
        editingSkillId = newSkill.Id; // Set the editing ID to the new skill's ID
        var send = await http.PostAsJsonAsync($"https://localhost:7192/api/newtech", newSkill);
        await LoadSkills();
    }
 

    private async Task CancelEditing()
    {
        editingSkillId = ""; // Temporary reset to force UI update
        await Task.Delay(10); // Small delay to allow UI to register change
        editingSkillId = null; // Now properly clear the edit state
        selectedSkill = null;
        await InvokeAsync(StateHasChanged);

        Console.WriteLine($"After Cancel: editingSkillId = {editingSkillId}");
    }
    private async Task DeleteSkill(string skillId)
    {
        var response = await http.DeleteAsync($"https://localhost:7192/api/deletetech{skillId}");
        if (response.IsSuccessStatusCode)
        {
            skills = skills?.Where(s => s.Id != skillId).ToList(); // Remove from UI

        }
        else
        {
            Console.WriteLine("Failed to delete skill.");
        }
    }
    private string GetCardBackgroundClass(string techName)
    {
        return techName.ToLower() switch
        {
            "blazor" => "bg-blazor",
            "react" => "bg-react",
            "c#" => "bg-csharp",
            "docker" => "bg-docker",
            "terraform" => "bg-terraform",
            "mongo" => "bg-mongodb",
            "sql" => "bg-sql",
            "azure" => "bg-azure",
            "python" => "bg-python",
            "firebase" => "bg-firebase",
            "rest api" => "bg-restapi",
            "kubernetes" => "bg-kubernetes",

            _ => "bg-default" // Fallback background
        };
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await jsruntime.InvokeVoidAsync("loadClouds");
        }
    }

    private async Task AddProjectAsync()
    {
        var newProject = new TechsModel
            {
                project = "new default",
                Technologies = "New Technology", // Default name
                githubUrl = "example.wwwokwo.com",
                image = "favicon.png" // Default image
            };

        // Add the new skill to the list
        editingSkillId = newProject.Id; // Set the editing ID to the new skill's ID
        var send = await http.PostAsJsonAsync($"https://localhost:7192/api/newtech", newProject);
        await LoadSkills();
    
    }
}