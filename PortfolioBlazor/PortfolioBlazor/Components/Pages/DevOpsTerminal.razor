
@using PortfolioBlazor.Services
@using Microsoft.AspNetCore.Components.Web
@inject TerminalServices terminalService
@inject NavigationManager navigator
@using System.Threading;
@using System.Threading.Tasks;

<div class="container-fluid p-0">

    <!-- Terminal Output -->
    <div class="terminal bg-dark text-success border-top w-100 m-0">
        <!-- Display Path -->
        <div class="path-display mb-2">
            [📂] Current Path: @currentPath
        </div>
        <div class="text-success text-center mb-2">
          
            <span>@currentPrompt</span>
        </div>
        <!-- Log Output -->
        <div class="log-output mb-3">
            @foreach(var log in terminalService.Logs)
            {
                <div>@log</div>
               
            }
           
        </div>

        <!-- Command Input -->
        <div class="input-group">
            <span class="input-group-text bg-dark text-success border-0">$</span>
            <input type="text" class="form-control bg-dark text-success border-0"
                   @bind="command" @bind:event="oninput"
                   @onkeypress="HandleKeyPress"
                   placeholder="Enter command here..." autofocus />
        </div>
    </div>
</div>
@code {
    private string command = "";
    private string currentPath = "/";
    private string infoMessage1 = "[INFO] DevOps Terminal Initialized.";
    private string infoMessage2 = "[INFO] Type commands like: cd projects, ls skills, deploy portfolio.";
    private string currentPrompt = "";
    private string[] prompts = new[]
    {
        "~$ Type 'ls info' to get in touch!",
        "~$ Type 'cd projects' to see my work!",
        "~$ Type 'ls skills' to explore my skills!"
    };
    private int promptIndex = 0;
    private Timer? timer;
    private List<string> commandList = new List<string>
    {
        new string("'ls help'"),
        new string("'cd home'"),
        new string("'cd projects'"),
        new string("'cls - clearing terminal'"),
        new string("'ls skills'"),
        new string("'ls info'")
    };
    protected  override async Task OnInitializedAsync()
    {

        currentPrompt = prompts[0];
        timer = new Timer(ChangePrompt, null, 0, 5000); // Change every 5 seconds
                                                        // Add startup message if empty
        if (!terminalService.Logs.Any())
        {
            terminalService.AddLog(infoMessage1);
            await Task.Delay(500);
            terminalService.AddLog(infoMessage2);

        }
    }
    protected override void OnParametersSet()
    {
        // Get path from current URL
        var relativePath = navigator.ToBaseRelativePath(navigator.Uri);
        currentPath = string.IsNullOrWhiteSpace(relativePath) ? "/home" : $"/{relativePath}";
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(command))
        {
            terminalService.AddLog($"$ {command}");
            switch (command.ToLower())
            {
                case "cd projects":
                    terminalService.AddLog("[INFO] Navigating to /projects...");
                    navigator.NavigateTo("/projects");
                    currentPath = "/projects";
                    break;


                case "cd home":
                    terminalService.AddLog("[INFO] Navigating to /home...");
                    navigator.NavigateTo("/");
                    currentPath = "/home";
                    break;


                case "ls skills":
                    terminalService.AddLog("[INFO] Showing /skills...");
                    navigator.NavigateTo("/skills");
                    currentPath = "/skills";
                    await Task.Delay(100);
                    StateHasChanged();
                    break;


                case "deploy portfolio":
                    navigator.NavigateTo("/portfolio");
                    currentPath = "/portfolio";
                    terminalService.AddLog("[INFO] Deploying Portfolio...");
                    break;


                case "cls":
                    terminalService.Logs.Clear();
                    terminalService.AddLog("[INFO] Terminal cleared.");
                    break;

                case "ls info":
                    if (!terminalService.Logs.Any(log => log.ToString().Contains("LinkedIn:"))) // Check if links are already in the log
                    {
                        terminalService.AddLog("[INFO] Displaying contact info...");
                        terminalService.AddLog("[INFO] LinkedIn: <a href='https://linkedin.com/in/dersimabbas'target='_blank'>linkedin.com/in/dersimabbas</a>");
                        terminalService.AddLog("[INFO] GitHub: <a href='https://github.com/dersimabbas' target='_blank'>github.com/dersimabbas</a>");
                    }
                    break;

                case "ls help":
                    terminalService.AddLog($"[INFO] availbale commands:");
                    foreach(var command in commandList)
                    {
                        terminalService.AddLog($"$ {command}");
                    }
                    break;

                default:
                    terminalService.AddLog($"[ERROR] Unknown command: '{command}', type ls help for all available commands.");
                    break;


            }
            await Task.Delay(100);
            StateHasChanged();
            command = string.Empty;
        }
    }
    private void ChangePrompt(object? state)
    {
        promptIndex = (promptIndex + 1) % prompts.Length;
        currentPrompt = prompts[promptIndex];
        InvokeAsync(StateHasChanged); // Refresh UI
    }

    public void Dispose()
    {
        timer?.Dispose();
    }


           
           
}