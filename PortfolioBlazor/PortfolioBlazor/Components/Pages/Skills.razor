@page "/skills"
@inject TerminalServices terminalService
@inject MinimalApi server
@inject IJSRuntime js
@using PortfolioBlazor.Services
@using Microsoft.AspNetCore.Components.Web
@using PortfolioBlazor.Models
@using PortfolioBlazor.Server
@using BlazorBootstrap
@using Color = System.Drawing.Color

<div class="azure-dashboard text-white min-vh-100">
    <div class="azure-header bg-primary d-flex align-items-center p-3 mb-4">
        <h4 class="m-0 ms-3">🛠️ Tech Skills Dashboard</h4>
    </div>

    <div class="container">
        <div class="row g-3">
            @foreach (var skill in skills)
            {
                <div class="col-lg-4 col-md-6 col-sm-12">
                    <div class="card skill-card bg-secondary text-white h-100 p-3 shadow-lg rounded"
                         @onclick:stopPropagation="true"
                         @onclick="() => ShowSkillModal(skill)">
                        <h5>@skill.Tech</h5>
                        <p>Experience: @skill.TechExperience</p>
                        <p>Skill Level: @skill.SkillLevel</p>
                    </div>
                </div>
            }
        </div>
    </div>
    @if (selectedSkill != null)
    {
        <div class="modal fade show d-block" tabindex="-1" role="dialog" >
            <div class="modal-dialog modal-lg">
                <div class="modal-content text-white p-3">
                    <div class="modal-header">
                        <h5 class="modal-title">@selectedSkill.Tech - Progress Over Time</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" @onclick="CloseModal"></button>
                    </div>
                    <div class="modal-body">
                        <LineChart @ref="lineChart" Width="600" Height="300" />
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<DevOpsTerminal />

@code {
    private List<TechsModel> skills = new();
    private TechsModel? selectedSkill;
    private TechsModel? availableSkills;
    private LineChart lineChart = default!;
    private LineChartOptions lineChartOptions = default!;
    private ChartData chartData = default!;
    private int datasetsCount;
    private int labelsCount;
    private Random random = new();

    protected override async Task OnInitializedAsync()
    {
        skills = await server.FetchTechsAsync();
        var c = ColorUtility.CategoricalTwelveColors[6].ToColor();
        var labels = skills.Select(s => s.Tech).ToList();
        var datasets = new List<IChartDataset>();

        var skillLabel = selectedSkill?.Tech ?? "Skill Progress";
        var skillValue = new List<double?>();

        foreach( var skilLvl in skills)
        {
            skillValue.Add(skilLvl.SkillLevel);
            Console.WriteLine(skilLvl.SkillLevel);
        }

        var skilldata = new LineChartDataset
            {
                Label = skillLabel,
                Data = skillValue,
                BackgroundColor = c.ToRgbString(),
                BorderColor = c.ToRgbString(),
                PointRadius = new List<double> { 5 },
                PointHoverRadius = new List<double> { 8 }
            };
        datasets.Add(skilldata);

        chartData = new ChartData
            {
                Labels = labels,
                Datasets = datasets
            };

        lineChartOptions = new LineChartOptions
            {
                Responsive = true,
                Interaction = new Interaction { Mode = InteractionMode.Index },
                Scales = new()
                {
                    X = new()
                    {
                        Title = new() { Text = "Tech Experience", Display = true }
                    },
                    Y = new()
                    {
                        Title = new() { Text = "Skill Level", Display = true }
                    }
                },
                Plugins = new()
                {
                    Title = new() { Text = "Tech Skills Progress", Display = true }
                }
            };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && chartData != null && lineChartOptions != null)
        {
            await lineChart.InitializeAsync(chartData, lineChartOptions);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task ShowSkillModal(TechsModel skill)
    {
        selectedSkill = skill;
        await InvokeAsync(StateHasChanged); // Ensure the modal is rendered first
        await Task.Delay(100); // Small delay to allow DOM to render
        if (lineChart != null)
        {
            await lineChart.InitializeAsync(chartData, lineChartOptions);
        }
    }
    private void CloseModal()
    {
        selectedSkill = null;
    }
    

}