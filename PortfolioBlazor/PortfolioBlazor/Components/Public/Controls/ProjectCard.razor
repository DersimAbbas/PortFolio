
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Authorization
@using PortfolioBlazor.Models
@using PortfolioBlazor.Server
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient http
@inject MinimalApi server


<div class="card skill-card border border-secondary shadow-sm bg-dark text-light rounded" style="z-index:500;">
        <img class="card-img-top" src="/Images/firebase.png" />
        <div class="card-body">
            <h5 class="card-title">@Skill?.project</h5>
          
            <p class="card-text">@Skill?.Description</p>
        </div>
         
        <div class="card-footer">
            @if (isAuthorized)
            {
                if (IsEdit)
                {
                    <EditForm Model="Skill" OnValidSubmit="()=> onskillUpdate.InvokeAsync(Skill)">
                             <label class="form-label">Project Name</label>
                             <InputText @bind-Value="Skill.project" class="form-control"/>
                            <label class="form-label">Technologies Used</label>
                            <label class="form-label">Description:</label>
                            <InputText @bind-Value="Skill.Description" class="form-control" />
                            <InputText @bind-Value="Skill.Technologies" class="form-control"/>
                            <button type="submit"class="btn btn-success">Update</button>
                            <button type="button"class="btn btn-secondary" @onclick="OnCancel">Cancel</button>
                    </EditForm>
                }
                else
                {
                    
                    <button type="button"class="btn btn-primary" @onclick="() =>IsEdit = true">Toggle</button>
                     <button type="button" class="btn btn-danger" @onclick="() => DeleteSkill.InvokeAsync(Skill)">Delete</button>
                }
            }
            @if (Skill.TechnologiesList.Any())
            {
            <div class="d-flex flex-wrap">
                    @foreach (var tech in Skill.TechnologiesList)
                    {
                        <span class="badge bg-primary text-white me-2 mt-2 mx-auto">@tech</span>
                    }
                </div>
            }

             <button class="btn btn-info mt-2">Live Demo</button>
       
        </div>
    </div>
              
@code {

    public bool IsEdit;

    [Parameter] public TechsModel? Skill { get; set; }

    [Parameter] public bool isAuthorized { get; set; }

    [Parameter] public EventCallback<TechsModel> DeleteSkill { get; set; }

    [Parameter] public EventCallback<TechsModel> onskillUpdate { get; set; }

    private TechsModel oldSkill = new();

    protected override void OnInitialized()
    {
        oldSkill.Technologies = Skill.Technologies;
        oldSkill.SkillLevel = Skill.SkillLevel;
        oldSkill.project = Skill.project;
        oldSkill.githubUrl = Skill.githubUrl;
        oldSkill.Description = Skill.Description;
    }

    public void OnCancel()
    {
        IsEdit = false;
        Skill.Technologies = oldSkill.Technologies;
        Skill.SkillLevel = oldSkill.SkillLevel;
        Skill.project = oldSkill.project;
        Skill.githubUrl = oldSkill.githubUrl;
        Skill.Description = oldSkill.Description;
    }
}
