@page "/skills"
@inject TerminalServices terminalService
@inject MinimalApi server
@inject IJSRuntime js
@using PortfolioBlazor.Services
@using Microsoft.AspNetCore.Components.Web
@using PortfolioBlazor.Models
@using PortfolioBlazor.Server
@using BlazorBootstrap
@using Color = System.Drawing.Color 

<div class="container-fluid p-5">
    <h2 class="text-center">🛠️ Tech Skills  Dashboard</h2>
    <div class="row row-cols-1 row-cols-sm-1 row-cols-md-2 row-cols-lg-4 row-cols-xl-8 g-2 d-flex justify-content-start mx-auto" style="max-width:800px;">
        
            @foreach (var skill in skills)
            {
              <div class="col-2 mb-3">
                  <SkillCard Skill="skill" IsAuthorized="true"/>
              </div>

            }
            @if (selectedSkill != null)
            {
                <div class="modal fade" id="skillprogress" tabindex="-1" aria-hidden="true" aria-labelledby="skillprogressLabel">
                    <div class="modal-dialog">
                        <div class="modal-content text-white">
                            <div class="modal-header">
                                <h5 class="modal-title bg-success text-center">@selectedSkill.Technologies - Progress Over Time</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" @onclick="CloseModal"></button>
                            </div>
                            <div class="modal-body" style="max-width:800px; min-width:320px;">
                                <LineChart @ref="lineChart" />
                            </div>
                        </div>
                    </div>
                </div>
            }
    </div>
        <div class="d-flex justify-content-center">

            <button class="btn btn-primary mt-3" role="button" style="z-index:10;" @onclick="ToggleIaCView">Show skills As IAC</button>
        </div>

    <div class="d-flex flex-wrap justify-content-center">
        @if (showIaC)
        {
            <SkillsIac Skills="skills" />
        }
    </div>

</div>

<DevOpsTerminal />

@code {
    private List<TechsModel> skills = new();
    private TechsModel? selectedSkill;
    private LineChart lineChart = default!;
    private LineChartOptions lineChartOptions = default!;
    private ChartData chartData = default!;
    private bool showIaC = false;
    protected override async Task OnInitializedAsync()
    {
        skills = await server.FetchTechsAsync();

    }
    private void ToggleIaCView()
    {
        showIaC = !showIaC;
    }


    private async Task ShowSkillModal(TechsModel skill)
    {
        
        selectedSkill = skill;
        var c = ColorUtility.CategoricalTwelveColors[6].ToColor();

        var labels = new List<string>();  // Use selected skill experience
        var skillValue = new List<double?>();  // Use selected skill level
        int experienceMonths = int.Parse(new string(selectedSkill.TechExperience.Where(char.IsDigit).ToArray()));

        for (int i = 1; i <= experienceMonths; i++)
        {
            labels.Add($"{i} Month{(i > 1 ? "s" : "")}");
            skillValue.Add(selectedSkill.SkillLevel * Math.Pow(1.05, i));  // Skill level grows by 5% each month;  // Repeat skill level for each month up to experience
        }
        var skilldata = new LineChartDataset
        {
            Label = selectedSkill.Technologies,  // Use selected skill name
            Data = skillValue,
            BackgroundColor = c.ToRgbString(),
            BorderColor = c.ToRgbString(),
            PointRadius = new List<double> { 5 },
            PointHoverRadius = new List<double> { 8 }
        };
        var test = new List<double?>();
        chartData = new ChartData
        {
            Labels = labels,
            Datasets = new List<IChartDataset> {skilldata }
        };

        lineChartOptions = new LineChartOptions
        {
            Responsive = true,
            Interaction = new Interaction { Mode = InteractionMode.Index },
            Scales = new()
            {
                X = new() { Title = new() { Text = "Experience Time", Display = true } },
                Y = new() { Title = new() { Text = "Skill Level", Display = true } }
            },  
            Plugins = new() { Title = new() { Text = $"{selectedSkill.Technologies} Skill Progress", Display = true } }
        };

        await InvokeAsync(StateHasChanged); // Ensure the modal is rendered first
        await Task.Delay(100); // Small delay to allow DOM to render

        if (lineChart != null)
        {
            await lineChart.InitializeAsync(chartData, lineChartOptions);
        }
        await js.InvokeVoidAsync("showModal", "skillprogress");
    }

    private void CloseModal()
    {
        selectedSkill = null;
    }
    
    private string GetCardBackgroundClass(string techName)
    {
        return techName.ToLower() switch
        {
            "blazor" => "bg-blazor",
            "react" => "bg-react",
            "c#" => "bg-csharp",
            "docker" => "bg-docker",
            "terraform" => "bg-terraform",
            "mongo" => "bg-mongodb",
            "sql" => "bg-sql",
            "python" => "bg-python",
            "firebase" => "bg-firebase",
            "rest api" => "bg-restapi",
            "kubernetes" => "bg-kubernetes",
            "azure" => "bg-azure",
            _ => "bg-default"
        };
    }

}