@page "/projects"
@inject IJSRuntime js
@inject MinimalApi server
@inject NavigationManager navigator
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Http
@using PortfolioBlazor.Server
@using PortfolioBlazor.Models
@using PortfolioBlazor.Services
@*

    @if (!IsAuthenticated)
    {
        <p>Redirecting to login...</p>
    
    }
    else
    {
        <div class="container-fluid p-5">
            <div class="row row-cols-1 row-cols-lg-2 g-3 d-flex justify-content-start mx-auto" style="max-width:1000px">
                @foreach (var skill in Project)
                {
                    if(editskill != skill.Id)
                    {
                        <ProjectCard Skill="skill">
                            <AdminContent>
                                <div class="card skill-card border bg-danger pb-5 text-white rounded" style="z-index:500;"
                                     @onclick="()=>DisplayEditForm(skill.Id)">
                                
                                    <img class="card-img-top" src="/Images/firebase.png" />
                                    <div class="card-body">
                                        <h5 class="card-title">@skill.Technologies</h5>

                                        <p class="card-text">@skill.Id</p>

                                    </div>
                                    <div class="card-footer">
                                        <button type="button" class="btn btn-success" @onclick="() => DisplayEditForm(skill.Id)">Edit</button>
                                        <button class="btn btn-danger" @onclick="() => DeleteSkill(skill.Id)">Delete</button>
                                     @*    <button type="button" class="btn btn-danger" @onclick="() => AddProjectAsync()">Add Project</button> *@

                            @*         </div>
                                </div>

                            </AdminContent>
                          
                        </ProjectCard>
                    }
                    else
                    {
                        <ProjectTest Skill="skill" OnCancel="() => showForm = false">
                            <AdminContent>
                                <EditForm Model="skill" OnValidSubmit="@(async () => await UpdateSkill(skill))">
                                    <div class="card skill-card border bg-danger pb-5 text-white rounded" style="z-index:500;">
                                        <img class="card-img-top" src="/Images/firebase.png"/>
                                        <div class="card-body">
                                            <h5 class="card-title">@editSkillCopy.Technologies</h5>
                                            <InputText @bind-Value="editSkillCopy.Technologies" class="form-control" />
                                            <p class="card-text">@editSkillCopy.Id</p>
                                            <InputText @bind-Value="editSkillCopy.Id" class="form-control"></InputText>
                                        </div>
                                    </div>
                                        <div class="card-footer">
                                      
                                            <button type="submit"class="btn btn-success form-control">Save</button>
                                        </div>
                                </EditForm>
                                     
                         
                            </AdminContent>
                        </ProjectTest>
                    
                    }

                }
            </div>
        </div>
   
    } *@

<DevOpsTerminal/>
 
@code{
    public List<TechsModel> Project = new();
    public TechsModel? skill;
    public string testmsg = "";
    private string? editskill = null;
    private TechsModel? editSkillCopy;
    public TechsModel? selectedSkill;
    private bool IsAuthenticated = false;
    private bool showForm = false;
    protected override async Task OnInitializedAsync()
    {
        var token = await js.InvokeAsync<string>("localStorage.getItem", "authToken");
        Console.WriteLine(token);
        if (string.IsNullOrEmpty(token))
        {   
            navigator.NavigateTo("/login");
            return;
        }

        IsAuthenticated = true;
        await LoadSkills();
    }
    private async Task LoadSkills()
    {
        Project = await server.FetchTechsAsync();
    }

     // Temporary object for editing

    private async Task DisplayEditForm(string skillId)
    {
        if (editskill == skillId) return; // Prevent re-render if already editing

        editskill = ""; // Temporary reset

        selectedSkill = Project.FirstOrDefault(s => s.Id == skillId);

        if (selectedSkill != null)
        {
            // Create a copy to prevent temporary UI updates affecting the list
            editSkillCopy = new TechsModel
                {
                    Id = selectedSkill.Id,
                    Technologies = selectedSkill.Technologies,
                    TechExperience = selectedSkill.TechExperience,
                    SkillLevel = selectedSkill.SkillLevel,
                    image = selectedSkill.image
                };
        }

        editskill = skillId;

        await InvokeAsync(StateHasChanged); // Force UI refresh
    }

    private async Task UpdateSkill(TechsModel skill)
    {
        var response = await server.UpdateTechAsync(skill.Id, skill);
        CancelEditing();
        LoadSkills();
        await InvokeAsync(StateHasChanged);
    }

    private async Task DeleteSkill(string id)
    {
        try
        {
            var response = await server.DeleteTechAsync(id);
            Project = Project.Where(s => s.Id != id).ToList();
        }
        catch(Exception ex)
        {
            Console.WriteLine($"failed to delete: {ex.Message}");
        }        
       
        await InvokeAsync(StateHasChanged);
    }
    private async Task AddProjectAsync()
    {
        var newProject = new TechsModel
            {
                project = "new default",
                Technologies = "New Technology", // Default name
                githubUrl = "example.wwwokwo.com",
                image = "favicon.png" // Default image
            };

        // Add the new skill to the list
        editskill = newProject.Id; // Set the editing ID to the new skill's ID
        await server.AddTechAsync(newProject);
        await InvokeAsync(StateHasChanged);
    }

    private async Task CancelEditing()
    {
        editskill = null; // Clear editing ID
        editSkillCopy = null; // Reset temporary object

        await InvokeAsync(StateHasChanged); // Force UI refresh
        Console.WriteLine($"After Cancel: editingSkillId = {editskill}");
    }
    
}

