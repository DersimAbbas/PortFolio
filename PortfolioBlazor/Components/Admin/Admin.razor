@page "/admin"
@inject HttpClient http
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.Authorization
@using PortfolioBlazor.Components.Layout
@using PortfolioBlazor.Models
@using System.Data
@rendermode InteractiveServer
@layout AdminLayout

@inject IJSRuntime jsruntime
@attribute [Authorize(Roles = "admin")]
<div id="cloud-js"></div>

<div class="container-fluid p-5">
    <div class="text-center">
        <h3>Admin Dashboard</h3>
        <p>Welcome to the Admin Panel!</p>
    </div>
    <div class="row row-cols-sm-1 row-cols-md-2 row-cols-lg-4 row-cols-xl-8 g-2 d-flex justify-content-start mx-auto" style="max-width:1000px;">

        @foreach (var skill in skills)
        {
            <div class="col pb-2">
                <div class="card skill-card border-primary pb-1 px-2 rounded @(GetCardBackgroundClass(skill.Technologies))" style="z-index:500;"
                     @onclick="()=>DisplayEditForm(skill.Id)">
                    <div class="card-header d-flex justify-content-between">
                        <!-- Normal Card View -->
                        <h5>@skill.Technologies</h5>
                        <img src="/Images/@(skill.image  != null ? skill.image :  "favicon.png")" style="max-width:50px; max-height:35px" />
                    </div>

                    <div class="card-body text-bg-secondary">
                        @if (editingSkillId != skill.Id)
                        {

                            <p>Experience: @skill.TechExperience</p>
                            <p>Skill Level: @skill.SkillLevel</p>

                            <div class="d-flex justify-content-between" style="max-height:35px; min-width:35px;">
                                <button class="btn btn-warning boder border-success" @onclick="() => DisplayEditForm(skill.Id)">Edit </button>
                                <button class="btn btn-danger border border-dark" @onclick="() => DeleteSkill(skill.Id)">Delete </button>
                            </div>
                        }
                        else
                        {

                            <EditForm Model="skill" OnValidSubmit="@(async () => await UpdateSkill(skill))">
                                <DataAnnotationsValidator />


                                <div class="mb-2">
                                    <label class="form-label">Technology Name</label>
                                    <InputText @bind-Value="skill.Technologies" class="form-control" />
                                    <ValidationMessage For="() => skill.Technologies" />
                                </div>
                                <div class="mb-2">
                                    <label class="form-label">Experience</label>
                                    <InputText @bind-Value="skill.TechExperience" class="form-control" />
                                    <ValidationMessage For="() => skill.TechExperience" />
                                </div>
                                <div class="mb-2">
                                    <label class="form-label">Project</label>
                                    <InputText @bind-Value="skill.project" class="form-control" />
                                    <ValidationMessage For="() => skill.TechExperience" />
                                </div>
                                <div class="mb-2">
                                    <label class="form-label">Github</label>
                                    <InputText @bind-Value="skill.githubUrl" class="form-control" />
                                    <ValidationMessage For="() => skill.TechExperience" />
                                </div>
                                <div class="mb-2">
                                    <label class="form-label">Description</label>
                                    <InputText @bind-Value="skill.Description" class="form-control" />
                                    <ValidationMessage For="() => skill.TechExperience" />
                                </div>

                                <div class="mb-2">
                                    <label class="form-label">Skill Level (1-5)</label>
                                    <InputNumber @bind-Value="skill.SkillLevel" class="form-control" />
                                    <ValidationMessage For="() => skill.SkillLevel" />
                                </div>

                                <div class="mb-2">
                                    <label class="form-label">image name</label>
                                    <InputText @bind-Value="skill.image" class="form-control" />
                                    <ValidationMessage For="() => skill.image" />
                                </div>

                                <button type="submit" class="btn btn-success">Save</button>
                                <button type="button" class="btn btn-secondary ms-2" @onclick="CancelEditing">Cancel</button>

                            </EditForm>
                        }

                    </div>
                </div>
            </div>
        }
    </div>
</div>
<div class="d-flex justify-content-center">

    <button class="btn btn-success border-bg-success" @onclick="AddSkillAsync" style="z-index:55;">Add skill</button>
</div>





@code {
    private List<TechsModel>? skills = new();
    private TechsModel? selectedSkill;
    private string? editingSkillId = null;
    private bool DisplayForm = false;
    protected override async Task OnInitializedAsync()
    {
        await LoadSkills();
    }

    private async Task LoadSkills()
    {
        skills = await http.GetFromJsonAsync<List<TechsModel>>("https://localhost:7192/api/techs");
    }

    private async Task UpdateSkill(TechsModel skill)
    {
        var response = await http.PutAsJsonAsync($"https://localhost:7192/api/tech{skill.Id}", skill);
        if (response.IsSuccessStatusCode)
        {
            await LoadSkills();
            CancelEditing();  // Close the edit form
        }
    }
    private async Task AddSkillAsync()
    {
        var newSkill = new TechsModel
            {

                Technologies = "New Technology", // Default name
                TechExperience = "0 years", // Default experience
                SkillLevel = 1, // Default skill level
                image = "favicon.png" // Default image
            };

        // Add the new skill to the list
        editingSkillId = newSkill.Id; // Set the editing ID to the new skill's ID
        var send = await http.PostAsJsonAsync($"https://localhost:7192/api/newtech", newSkill);
        await LoadSkills();
    }
    private async Task DisplayEditForm(string skillId)
    {
        if (editingSkillId == skillId) return; // Prevent re-render if already editing

        editingSkillId = ""; // Temporary reset

        editingSkillId = skillId;
        selectedSkill = skills.FirstOrDefault(s => s.Id == skillId);

        await InvokeAsync(StateHasChanged); // Force UI refresh
    }

    private async Task CancelEditing()
    {
        Console.WriteLine($"Before Cancel: editingSkillId = {editingSkillId}");

        editingSkillId = ""; // Temporary reset to force UI update
        await Task.Delay(10); // Small delay to allow UI to register change
        editingSkillId = null; // Now properly clear the edit state
        selectedSkill = null;

        await InvokeAsync(StateHasChanged); // Force UI refresh

        Console.WriteLine($"After Cancel: editingSkillId = {editingSkillId}");
    }
    private async Task DeleteSkill(string skillId)
    {
        var response = await http.DeleteAsync($"https://localhost:7192/api/deletetech{skillId}");
        if (response.IsSuccessStatusCode)
        {
            skills = skills.Where(s => s.Id != skillId).ToList(); // Remove from UI
            StateHasChanged(); // Refresh UI
        }
        else
        {
            Console.WriteLine("Failed to delete skill.");
        }
    }
    private string GetCardBackgroundClass(string techName)
    {
        return techName.ToLower() switch
        {
            "blazor" => "bg-blazor",
            "react" => "bg-react",
            "c#" => "bg-csharp",
            "docker" => "bg-docker",
            "terraform" => "bg-terraform",
            "mongo" => "bg-mongodb",
            "sql" => "bg-sql",
            "azure" => "bg-azure",
            "python" => "bg-python",
            "firebase" => "bg-firebase",
            "rest api" => "bg-restapi",
            "kubernetes" => "bg-kubernetes",

            _ => "bg-default" // Fallback background
        };
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await jsruntime.InvokeVoidAsync("loadClouds");
        }
    }
}
