@page "/aprojects"
@using PortfolioBlazor.Components.Public.Controls
@using Microsoft.AspNetCore.Authorization
@using PortfolioBlazor.Components.Layout
@using PortfolioBlazor.Models
@using PortfolioBlazor.Server
@inject HttpClient http
@inject NavigationManager Navigation
@inject MinimalApi server
@rendermode InteractiveServer
@layout AdminLayout
@inject IJSRuntime jsruntime

<div id="cloud-js"></div>

<div class="container-fluid p-5">
    <div class="text-center">
        <h3>Admin Dashboard</h3>
        <p>Welcome to the Admin Panel!</p>
    </div>
    <div class="row row-cols-auto row-cols-md-1 row-cols-lg-2 g-3 d-flex justify-content-start mx-auto" style="max-width:1000px">

        @if (skills.Any())
        {
            @foreach (var skill in skills.Where(s => s.project != null))
            {
                <div class="col px-2">
                    <ProjectCard Skill="skill"
                    isAuthorized="true"
                    ImageUrl="skill"
                    updateProject="() => UpdateSkill(skill)"
                    DeleteSkill="() => DeleteSkill(skill.Id)"/>    
                </div>
            }

        }
    </div>
</div>

<div class="d-flex justify-content-center">
    <button class="btn btn-Primary border-bg-Alert" @onclick="AddProjectAsync" style="z-index:55;">Add Project</button>
</div>


@code {
    private List<TechsModel>? skills = new();
    private TechsModel? selectedSkill;
    private List<TechsModel>? Projects = new();
    private string? editingSkillId = null;


    protected override async Task OnInitializedAsync()
    {
        skills = await server.FetchProjectsAsync();
    }
    private async Task UpdateSkill(TechsModel skill)
    {

        var response = await http.PutAsJsonAsync($"https://localhost:7192/api/updatetech{skill.Id}", skill);
        if (response.IsSuccessStatusCode)
        {


        }
        await InvokeAsync(StateHasChanged);// Close the edit form
    }
    private async Task LoadProjects()
    {
        skills = await server.FetchTechsAsync();
    }
    private async Task CancelEditing()
    {
        editingSkillId = ""; // Temporary reset to force UI update
        await Task.Delay(10); // Small delay to allow UI to register change
        editingSkillId = null; // Now properly clear the edit state
        selectedSkill = null;
        await InvokeAsync(StateHasChanged);

        Console.WriteLine($"After Cancel: editingSkillId = {editingSkillId}");
    }
    private async Task DeleteSkill(string skillId)
    {
        var response = await http.DeleteAsync($"https://localhost:7192/api/deletetech{skillId}");
        if (response.IsSuccessStatusCode)
        {
            skills = skills?.Where(s => s.Id != skillId).ToList(); // Remove from UI

        }
        else
        {
            Console.WriteLine("Failed to delete skill.");
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await jsruntime.InvokeVoidAsync("loadClouds");
        }
    }

    private async Task AddProjectAsync()
    {
        var newProject = new TechsModel
            {
                project = "new default",
                Technologies = "New Technology, skills1, skills2, skills3,skill4,skill5", // Default name
                githubUrl = "example.wwwokwo.com",
                image = "favicon.png",// Default image
                Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam."
            };

        // Add the new skill to the list
        editingSkillId = newProject.Id; // Set the editing ID to the new skill's ID
        var send = await http.PostAsJsonAsync($"https://localhost:7192/api/newtech", newProject);
        await LoadProjects();

    }
}
