@using PortfolioBlazor.Models
@inject IJSRuntime JS
@inject TerminalServices TerminalService

<div>

    @if (PipelineStages == null || !PipelineStages.Any())
    {
        <p>No pipeline stages available.</p>
    }
    else
    {
        <div class="stages d-flex flex-wrap justify-content-center align-items-center">
            @foreach (var stage in PipelineStages.OrderBy(s => s.Order))
            {
                <div class="stage-card mx-3 text-center @(stage.IsActive ? "active-stage" : "")" style="position: relative;">
                    <h5>@stage.Project</h5>
                    <p>@stage.Description</p>
                    <button class="btn btn-link" @onclick="() => ToggleDetails(stage)">
                        @(stage.ShowDetails ? "Hide" : "Read More")
                    </button>
                    @if (stage.ShowDetails)
                    {
                        <div class="stage-details mt-2 p-2 border rounded">
                            <p>@stage.Details</p>
                        </div>
                    }
                </div>
                @if (IsRunning && stage != PipelineStages.Last())
                {
                    <div class="stage-connector mx-3"></div>
                }
            }
        </div>
    }

  

    @if (ShowProgressBar)
    {
        <div class="d-flex justify-content-center mt-3">
            <div class="progress" style="height: 24px; width:50%;">
                <div id="myBar" class="progress-bar bg-success" role="progressbar"
                     style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">
                </div>
            </div>
        </div>
    }

    <div class="progress-label text-center pt-3">
        <h5>@CurrentJobStatus</h5>
    </div>
</div>

@code {
    // Title can be overridden by the parent.
    

    // List of pipeline stages passed from the parent.
    [Parameter] public List<PipeLineStage> PipelineStages { get; set; } = new();

    // Internal UI state.
    private bool IsRunning = false;
    private bool ShowProgressBar = false;
    private string CurrentJobStatus = "Waiting to start pipeline...";

    /// <summary>
    /// Starts the pipeline animation and resets the UI state afterward.
    /// </summary>
    public async Task StartPipeline()
    {
        ResetPipelineState();
        await Task.Delay(250);
        TerminalService.AddLog("[INFO] Starting pipeline...");
        IsRunning = true;
        ShowProgressBar = true;
        int stageDuration = 1500; // Duration per stage in ms
        int totalStages = PipelineStages.Count;

        for (int i = 0; i < totalStages; i++)
        {
            PipelineStages[i].IsActive = true;
            double progress = ((i + 1) / (double)totalStages) * 100;

            // Animate progress using the provided JS function.
            await JS.InvokeVoidAsync("animateProgress", progress, stageDuration);
            await Task.Delay(stageDuration);

            TerminalService.AddLog($"[INFO] Completed stage: {PipelineStages[i].Project}");
            StateHasChanged();
        }

        CurrentJobStatus = "Pipeline execution completed successfully!";
        TerminalService.AddLog("[INFO] Build successful! All stages completed.");
        await Task.Delay(300);

        // Reset progress bar and UI state for the next run.
        ShowProgressBar = false;
        await JS.InvokeVoidAsync("resetProgressBar");
        IsRunning = false;
       
    }

    private void ResetPipelineState()
    {
        foreach (var stage in PipelineStages)
        {
            stage.IsActive = false;
            stage.ShowDetails = false;
        }
        CurrentJobStatus = "Waiting to start pipeline...";
        StateHasChanged();
    }

    private void ToggleDetails(PipeLineStage stage)
    {
        stage.ShowDetails = !stage.ShowDetails;
    }

    // Local model for pipeline stage.
    public class PipeLineStage
    {
        public string Id { get; set; }
        public string Project { get; set; }
        public string Description { get; set; }
        public string Details { get; set; }
        public int Order { get; set; }
        public string StageType { get; set; }

        // UI properties (not stored in database)
        public bool IsActive { get; set; }
        public bool ShowDetails { get; set; }
    }
}
