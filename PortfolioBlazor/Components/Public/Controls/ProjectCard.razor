
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Authorization
@using PortfolioBlazor.Models
@using PortfolioBlazor.Server
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient http
@inject MinimalApi server


<div class="card skill-card  border border-warning bg-dark text-light rounded" style="z-index:500;">
    <ProjectCarousel Images="Skill.ImageList" CarouselId="@(Skill.Id)"/>

        <div class="card-body text-center">
                <h3 class="card-title">@Skill?.project</h3>
          
                <p class="card-text">@Skill?.Description</p>
        </div>

        <div class="card-footer d-flex justify-content-start mx-auto">

            @if (Skill.TechnologiesList.Any())
            {
                <div class="d-flex flex-wrap justify-content-center gap-1">
                    @foreach (var tech in Skill.TechnologiesList)
                    {

                        <span class="badge bg-primary text-white text-center" style="font-size:13px;">@tech</span>
                    }
                </div>
            }

        </div>
        <div class="d-flex justify-content-center gap-5 mt-1">
            <button class="btn btn-outline-primary" @onclick="()=> OnDemoClicked.InvokeAsync(Skill)" style="max-height:35px;">Demo</button>
            <a href="@Skill.githubUrl" type="button" role="button" class="btn btn-outline-light" target="_blank"><Icon Name="IconName.Github"></Icon></a>
        </div>
        
       

        <div class="card-footer d-flex justify-content-start mx-auto">
            @if (isAuthorized)
            {
                if (IsEdit)
                {
                    <EditForm Model="Skill" OnValidSubmit="()=> updateProject.InvokeAsync(Skill)">
                             <label class="form-label">Project Name</label>
                             <InputText @bind-Value="Skill.project" class="form-control"/>
                            
                            <label class="form-label">Description:</label>
                            <InputText @bind-Value="Skill.Description" class="form-control" />

                            <label class="form-label">Technologies Used</label>
                            <InputText @bind-Value="Skill.Technologies" class="form-control"/>
                            <label class="form-label">Github link</label>
                            <InputText @bind-Value="Skill.githubUrl" class="form-control" />

                            <label class="form-label">Demo link</label>
                            <InputText @bind-Value="Skill.DemoUrl" class="form-control" />

                            <label class="form-label">Image url</label>
                            <InputText @bind-Value="Skill.image" class="form-control"/>

                            <button type="submit"class="btn btn-success" @onclick="UpdatedProject">Update</button>
                            <button type="button"class="btn btn-secondary" @onclick="OnCancel">Cancel</button>
                    </EditForm>
                }
                else
                {
                    
                    <button type="button"class="btn btn-primary btn-md text-center "
                    @onclick="ToggleEdit" style="max-height:30px;">Toggle</button>
                    
                    <button type="button" class="btn btn-danger btn-md" 
                    @onclick="() => DeleteSkill.InvokeAsync(Skill)" style="max-height:30px;">Delete</button>
                }
            }
       
        </div>
</div>
        
              
@code {

    public bool IsEdit;
    public bool ShowDemo;
    private DemoModal? demoModal;

    [Parameter] public TechsModel? Skill { get; set; }
    [Parameter] public EventCallback<TechsModel> OnDemoClicked { get; set; }
    [Parameter] public bool isAuthorized { get; set; }

    [Parameter]
    public TechsModel? ImageUrl { get; set; }

    [Parameter] public EventCallback<TechsModel> DeleteSkill { get; set; }

    [Parameter] public EventCallback<TechsModel> updateProject { get; set; }

    private TechsModel oldSkill = new();

    protected override void OnInitialized()
    {
        oldSkill.Technologies = Skill.Technologies;
        oldSkill.SkillLevel = Skill.SkillLevel;
        oldSkill.project = Skill.project;
        oldSkill.githubUrl = Skill.githubUrl;
        oldSkill.Description = Skill.Description;
        oldSkill.DemoUrl = Skill.DemoUrl;
    }




    private void ToggleEdit()
    {
        IsEdit = true;
    }
    private void UpdatedProject()
    {
        updateProject.InvokeAsync(Skill);
        IsEdit = false;
    }


    public void OnCancel()
    {
        IsEdit = false;
        Skill.Technologies = oldSkill.Technologies;
        Skill.SkillLevel = oldSkill.SkillLevel;
        Skill.project = oldSkill.project;
        Skill.githubUrl = oldSkill.githubUrl;
        Skill.Description = oldSkill.Description;
        Skill.DemoUrl = oldSkill.DemoUrl;
    }
}
