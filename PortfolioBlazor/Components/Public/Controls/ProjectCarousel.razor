@code{
    // carousel component for slides in card image.
}


<div id="carousel-@CarouselId" class="carousel slide" @attributes="AdditionalAttributes" data-bs-ride="carousel" style="z-index:350;">
    <div class="carousel-indicators">
        @for (int i = 0; i < Images.Count; i++)
        {
            <button type="button" data-bs-target="#carousel-@CarouselId" data-bs-slide-to="@i"
                    class="@(i == 0 ? "active" : "")"
                    aria-current="@(i == 0 ? "true" : null)"
                    aria-label="Slide @(i + 1)"></button>
        }
    </div>
    <div class="carousel-inner">
        @for (int i = 0; i < Images.Count; i++)
        {
            <div class="carousel-item @(i == 0 ? "active" : "")">
                <img src="Images/@(Images[i])" class="d-block img-thumbnail" alt="Slide @(i + 1)">
            </div>
        }
    </div>
    <button class="carousel-control-prev" type="button" data-bs-target="#carousel-@CarouselId" data-bs-slide="prev">
        <span class="carousel-control-prev-icon" style="color:red" aria-hidden="true"></span>
        <span class="visually-hidden">Previous</span>
    </button>
    <button class="carousel-control-next" type="button" data-bs-target="#carousel-@CarouselId" data-bs-slide="next">
        <span class="carousel-control-next-icon" style="background-color:aqua" aria-hidden="true"></span>
        <span class="visually-hidden">Next</span>
    </button>
</div>

@code {
    [Parameter]
    public List<string> Images { get; set; }

    [Parameter]
    public string CarouselId { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> AdditionalAttributes { get; set; }
}
