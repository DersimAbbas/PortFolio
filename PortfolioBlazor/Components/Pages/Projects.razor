@inject IJSRuntime js
@inject MinimalApi server
@inject NavigationManager navigator
@inject HttpClient http
@page "/projects"
@layout ProjectLayout
<PageTitle>Projects</PageTitle>
<title>Projects</title>
<div id="cloud-js"></div>
<DemoModal @ref="demoModal"/>
<div class="container-fluid p-5" style="z-index:200;">
    <div class="text-center mb-4">
        <h2>My Projects since my DevOps journey began</h2>
        <p class="fs-4">From 2024/08/20 - @DateTime.Now.ToString("yyyy/MM/dd")</p>
    </div>
    <div class="row row-cols-auto row-cols-md-1 row-cols-lg-2 g-3 d-flex justify-content-start mx-auto" style="max-width:1000px">

        @if (Project.Any())
        {
            @foreach (var skill in Project.Where(s => s.project != null))
            {
                <div class="col px-2">
                    <ProjectCard Skill="skill"
                                 OnDemoClicked="HandleDemoClicked"     
                                 ImageUrl="skill"
                                                />
                                 
                </div>
            }

        }
    </div>
</div>
<div class="d-flex justify-content-center">
    <div class="d-flex justify-content-start gap-3" style="z-index:500;">
        <NavigateButtons />

    </div>
</div>
<DevOpsTerminal/>

@code {

    private List<TechsModel> Project = new();
    private DemoModal demoModal = default!;

    protected override async Task OnInitializedAsync()
    {
        Project = await server.FetchProjectsAsync();
    }
    private async Task HandleDemoClicked(TechsModel skill)
    {
        // Show the demo modal with the selected project's data
        await demoModal.ShowDemoModalAsync(skill);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await js.InvokeVoidAsync("loadClouds");
            
        }
    }
   
}
