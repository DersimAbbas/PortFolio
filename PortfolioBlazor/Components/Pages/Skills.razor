@page "/skills"
@inject TerminalServices terminalService
@inject MinimalApi server
@inject IJSRuntime js
@layout ProjectLayout
@rendermode InteractiveServer
<PageTitle>Skills</PageTitle>
<title>Skills</title>

<div id="cloud-js" alt="cloud-background"></div>

<ChartModal @ref="chartModal"/>
 

<div class="container-fluid p-5" style="z-index:500;">
    <div class="text-center">
        <h3>Skill Dashboard</h3>
        <p>Welcome to the skill Panel!</p>
    </div>
    <div class="row row-cols-1 row-cols-sm-1 row-cols-md-2 row-cols-lg-4 row-cols-xl-8 g-2 d-flex justify-content-start mx-auto" style="max-width:1000px;">

        @foreach (var skill in skills.Where(s => s.project == null && s.SkillLevel > 1))
        {
            <div class="col pb-2">
                <SkillCard Skill="skill"
                    OnSkillClicked="() => DisplaySkillModal(skill)"
                        />
            </div>
        }
    </div>
  
    <div class="d-flex justify-content-center">
        @if (showIaC)
        {
            <SkillsIac Skills="skills" />
        
        }
    </div>

    <div class="d-flex justify-content-center">
        <button 
            class="btn btn-outline-warning m-5" role="button" 
            style="z-index:10;" @onclick="ToggleIaCView"
            >Show skills As IAC
        </button>
    </div>

    <div class="d-flex justify-content-center gap-4 mb-2">

        <NavigateButtons />
    </div>
</div>


    
<DevOpsTerminal />
    
@code {
    private List<TechsModel> skills = new();
    private TechsModel? selectedSkill;
    private LineChart lineChart = default!;
    private ChartModal chartModal = default!;
    private bool showIaC = false;
    private bool cloudsLoaded = false;

    protected override async Task OnInitializedAsync()
    {
        skills = await server.FetchTechsAsync();


    }
    private void ToggleIaCView()
    {
        showIaC = !showIaC;
    }

    private async Task DisplaySkillModal(TechsModel skill)
    {
        selectedSkill = skill;
        await chartModal.ShowSkillModalAsync(skill);

    }

    private void CloseModal()
    {
        selectedSkill = null;


    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !cloudsLoaded)
        {
            await js.InvokeVoidAsync("loadClouds");
            cloudsLoaded = true;
        }
    }
   
}