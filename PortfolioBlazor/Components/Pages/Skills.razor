@page "/skills"
@inject TerminalServices terminalService
@inject MinimalApi server
@inject IJSRuntime js
@layout ProjectLayout

<div id="cloud-js"></div>
<div class="container-fluid p-5">
    <h2 class="text-center">🛠️ Tech Skills  Dashboard</h2>
    <ChartModal @ref="chartModal" />
 
    <div class="row row-cols-1 row-cols-sm-1 row-cols-md-2 row-cols-lg-4 row-cols-xl-8 g-2 d-flex justify-content-start mx-auto" style="max-width:800px;">
        
            @foreach (var skill in skills.Where(s => s.project == null))
            {
              <div class="col-2 mb-3">
                  <SkillCard Skill="skill"
                    OnSkillClicked="() => DisplaySkillModal(skill)"/>
                  
              </div>

            }
 
    </div>
        <div class="d-flex justify-content-center">

            <button class="btn btn-primary mt-3" role="button" style="z-index:10;" @onclick="ToggleIaCView">Show skills As IAC</button>
        </div>

    <div class="d-flex flex-wrap justify-content-center">
        @if (showIaC)
        {
            <SkillsIac Skills="skills" />
        }
    </div>

</div>

<DevOpsTerminal />

@code {
    private List<TechsModel> skills = new();
    private TechsModel? selectedSkill;
    private LineChart lineChart = default!;
    private ChartModal chartModal = default!;
    private bool showIaC = false;

    protected override async Task OnInitializedAsync()
    {
        skills = await server.FetchTechsAsync();

    }
    private void ToggleIaCView()
    {
        showIaC = !showIaC;
    }

    private async Task DisplaySkillModal(TechsModel skill)
    {
        await chartModal.ShowSkillModalAsync(skill);
    }

    private void CloseModal()
    {
        selectedSkill = null;
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && selectedSkill != null)
        {
            await js.InvokeVoidAsync("showModal", "skillprogress");
            await js.InvokeVoidAsync("loadClouds");
            
        }
    }

}